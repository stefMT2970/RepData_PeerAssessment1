)
par(mfrow=c(2,2))
image(t(faceData)[,nrow(faceData):1])
image(t(approx10)[,nrow(approx10):1])
image(t(approx5)[,nrow(approx5):1])
image(t(approx1)[,nrow(approx1):1])
install.packages("knnflex")
install.packages("C:/Users/M1017592/Downloads/knnflex_1.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/M1017592/Downloads/knnflex_1.1.zip", repos = NULL)
library(knnflex)
?uninstall
?install
?install.packages
remove.packages("knnflex")
installed.packages()
heat.colors(12)
pal <- colorRamp(c("red", "blue"))
pal
pal(0)
pal(1)
image(t(faceData)[,nrow(faceData):1], col=colorRamp(c("red", "blue")))
image(t(faceData)[,nrow(faceData):1], col=colorRampPalette(c("red", "blue")))
image(t(faceData)[,nrow(faceData):1], col=pal(0)))
image(t(faceData)[,nrow(faceData):1], col=pal(0))
pal <- colorRampPalette(c("red", "blue"))
pal(2)
image(t(faceData)[,nrow(faceData):1], col=pal(12))
image(t(faceData)[,nrow(faceData):1], col=pal(120))
pal <- colorRampPalette(c("red", "green"))
image(t(faceData)[,nrow(faceData):1], col=pal(120))
?summary
libarary(ISLR)
library(ISLR)
data(Smarket)
str(Smarket)
summary(Smarket)
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
glm.fit
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
?ifelse
mean(glm.pred==Direction)
attach(Smarket)
head(glm.pred)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=2)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=3)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=4)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
?factor
library(boot)
X <- matrix(c(1,1,1,1,0,0,1,1),nrow=4)
rownames(X) <- c("a","a","b","b")
x
X
beta <- c(5, 2)
fit = X%*%beta
fit
X <- matrix(c(1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1),nrow=6)
rownames(X) <- c("a","a","b","b","c","c")
beta <- c(10,3,-3)
fit = X%*%beta
fit
X
2^30
1+30*(30+1)/2
30*31
930/2
?rep
library(glmnet)
fix(Hitters)
names(Hitters)
dim(Hitters)
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
library(ISLR)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
model.matrix(Salary~.,Hitters)
View(x)
library(glmnet)
?glmnet
seq(10,-2,length=100)
grid=10^seq(10,-2,length=100)
grid
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
dim(coef(ridge.mod))
head(coef(ridge.mod))
head(t(coef(ridge.mod)),2)
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
?predict
predict(ridge.mod,s=50,type="coefficients")
set.seed(1)
train=sample(1:nrow(x), nrow(x)/2)
test=(-train)
test
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid, thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred=predict(ridge.mod,s=1e10,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred=predict(ridge.mod,s=0,newx=x[test,],exact=T)
mean((ridge.pred-y.test)^2)
lm(y~x, subset=train)
predict(ridge.mod,s=0,exact=T,type="coefficients")[1:20,]
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
?cv.glmnet
54/43*69
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)[1:20,]
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
bestlam
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:20,]
lasso.coef
lasso.coef[lasso.coef!=0]
plot(cv.out)
plot(lasso.mod)
library(pls)
set.seed(2)
pcr.fit=pcr(Salary~., data=Hitters,scale=TRUE,validation="CV")
summary(pcr.fit)
validationplot(pcr.fit,val.type="MSEP")
summary(pcr.fit)
set.seed(1)
pcr.fit=pcr(Salary~., data=Hitters,subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred=predict(pcr.fit,x[test,],ncomp=7)
mean((pcr.pred-y.test)^2)
pcr.fit=pcr(y~x,scale=TRUE,ncomp=7)
summary(pcr.fit)
set.seed(1)
pls.fit=plsr(Salary~., data=Hitters,subset=train,scale=TRUE, validation="CV")
summary(pls.fit)
validationplot(pls.fit,val.type="MSEP")
pls.pred=predict(pls.fit,x[test,],ncomp=2)
mean((pls.pred-y.test)^2)
pls.fit=plsr(Salary~., data=Hitters,scale=TRUE,ncomp=2)
summary(pls.fit)
citation()
setwd("d:/dev/app/gitrepo/RepData_PeerAssessment1")
unzip(zipfile="activity.zip")
act <- read.csv("activity.csv")
View(act)
if(!file.exists("activity.csv)){
unzip(zipfile="activity.zip")
}
act <- read.csv("activity.csv")
if(!file.exists("activity.csv))
unzip(zipfile="activity.zip")
}
act <- read.csv("activity.csv")
if(!file.exists("activity.csv)){
unzip(zipfile="activity.zip")
}
if(!file.exists("activity.csv)) unzip(zipfile="activity.zip")
if(!file.exists("activity.csv)) unzip(zipfile="activity.zip")
!file.exists("activity.csv")
if(!file.exists("activity.csv")) unzip(zipfile="activity.zip")
if(!file.exists("activity.csv")) unzip(zipfile="activity.zip")
act <- read.csv("activity.csv")
str(act)
summary(act)
?as.Date
?is.date
?is.Date
Sys.date()
Sys.dat
Sys.Date()
Sys.Date() - act$date[1]
act$date[1]
as.Date(act$date[1])
summary(act)
str(act)
day(act$date[1])
act$date[1000] - act$date[1]
?read.csv
act <- read.csv("activity.csv", stringsAsFactors=FALSE)
View(act)
as.Date(act$date[1])
act$date[5000-5050]
act$date[7000]
as.Date(act$date[1], "%Y-%m-%d")
class(as.Date(act$date[1], "%Y-%m-%d"))
act$date <- as.Date(act$date, "%Y-%m-%d")
summary(act)
str(act)
mtn <- tapply(act$steps, act$date, sum, na.rm=T)
head(mtn)
hist(mtn)
?hist
plot(mtn)
dim(mtn)
hist(mtn)
qplot(mtn)
library(ggplot)
library(ggplot2)
qplot(mtn)
library(dplyr)
mtn <- act %>%
group_by(date)%>%
summarise_each(funs = "sum"")
)
}
mtn <- act %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum"")
mtn <- act %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
mtn
hist(mtn)
hist(steps)
hist(mtn$steps)
hist(mtn$date)
plot(mtn)
?hist
qplot(mtn)
omit.na(act)
a=na.omit(act)
dim(a)
actNoNA <- na.omit.(act)
mtn <- actnoNA %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
actNoNA <- na.omit.(act)
mtn <- actNoNA %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
actNoNA <- na.omit(act)
mtn <- actNoNA %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
mtn
View(mtn)
hist(actNoNA$steps)
mtn <- tapply(act$steps, act$date, sum, na.rm=T)
mtn
hist(mtn)
tn <- tapply(act$steps, act$date, sum, na.rm=T)
actNoNA <- na.omit(act)
mtn <- actNoNA %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
mtn
mtn <- act %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
mtn
actNoNA <- na.omit(act)
tn <- tapply(actNoNA$steps, act$date, sum)
mtn <- act %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
actNoNA <- na.omit(act)
tn <- tapply(actNoNA$steps, actNoNA$date, sum)
mtn <- act %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
tn
plot(mtn)
plot(mtn, type="l")
hist(mtn)
mtn <- actNoNA %>%
select(steps,date) %>%
group_by(date) %>%
summarise_each(funs = "sum")
hist(mtn$steps, breaks=20)
mean(mtn$steps)
mean(act$steps)
mean(act$steps, na.rm=T)
ghp <- ggplot(mtn, aes(steps))
ghp <- ghp +
geom_histogram(binwidth = 0.4) +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp
ghp <- ggplot(mtn, aes(steps))
ghp2 <- ghp +
geom_histogram(binwidth = 0.4) +
labs(x = "Number of steps on 1 day", y = "Frequency")
print(ghp2)
ghp2 <- ghp +
geom_histogram(binwidth = 1000) +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,colour="black", fill="white") +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,
colour="black",
fill="blue",
alpha=0.1) +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,
colour="black",
fill="blue",
alpha=0.9) +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,
colour="black",
fill="blue",
alpha=0.75) +
labs(x = "Number of steps on 1 day", y = "Frequency")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,
colour="black",
fill="blue",
alpha=0.75) +
labs(x = "Number of steps on 1 day",
y = "Frequency (on how many days did we have so many steps)S")
ghp2
ghp2 <- ghp +
geom_histogram(binwidth = 1000,
colour="black",
fill="blue",
alpha=0.75) +
labs(x = "Number of steps on 1 day",
y = "Frequency (on how many days did we have so many steps)")
ghp2
mean(mtn$steps)
median(mtn$steps)
adap <-  actNoNA %>%
select(steps, interval) %>%
group_by(interval)
adap <-  actNoNA %>%
select(steps, interval) %>%
group_by(interval) %>%
summarise_each(funs = "mean")
View(adap)
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line()
glp2
adap[which.max(adap$steps),]
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval",
y = "number of steps during an interval")
glp2
table(is.na(act$steps))
prop.table(is.na(act$steps))
table(is.na(act$steps))
missing <- table(is.na(act$steps))
missing
prop.table(missing)
prop.table(missing, 1)
prop.table(missing, 2)
prop.table(missing)
24*60
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hhmm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
835 %% 100
?round
trunc(835/100)
?strptime
strptime(835, format="%H%M")
?paste
tt = paste(835%%100, trunc(835/100), sep=":")
tt
strptime(tt, format="%H:%M")
?time
?strptime
class(tt)
tt = paste(trunc(835/100), 835%%100 sep=":")
tt = paste(trunc(835/100), 835%%100, sep=":")
tt
strptime(tt, format="%H:%M")
Sys.Time()
Sys.time()
head(strptime(paste(trunc(act$interval/100),
act$interval%%100,
sep = ":")
format= "%H:%M"))
head(strptime(paste(trunc(act$interval/100),
act$interval%%100,
sep = ":"),
format= "%H:%M"))
act$timeInterval <- strptime(paste(trunc(act$interval/100),
act$interval%%100,
sep = ":"),
format= "%H:%M")
View(act)
act$timeInterval <- paste(trunc(act$interval/100),
act$interval%%100,
sep = ":")
View(act)
adap <-  actNoNA %>%
select(steps, timeInterval) %>%
group_by(timeInterval) %>%
summarise_each(funs = "mean")
glp <- ggplot(adap, aes(timeInterval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hh:mm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
actNoNA <- na.omit(act)
adap <-  actNoNA %>%
select(steps, timeInterval) %>%
group_by(timeInterval) %>%
summarise_each(funs = "mean")
glp <- ggplot(adap, aes(timeInterval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hh:mm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
adap <-  actNoNA %>%
select(steps, interval) %>%
group_by(interval) %>%
summarise_each(funs = "mean")
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hh:mm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
adap <-  actNoNA %>%
select(steps, interval, timeInterval) %>%
group_by(interval) %>%
summarise_each(funs = "mean")
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hhmm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
adap <-  actNoNA %>%
select(steps, interval) %>%
group_by(interval) %>%
summarise_each(funs = "mean")
glp <- ggplot(adap, aes(interval, steps))
glp2 <- glp + geom_line(colour="blue")+
labs(x = "5' Interval(format hhmm)",
y = "number of steps during an interval")
glp2
adap[which.max(adap$steps),]
library(xtable)
missing <- table(is.na(act$steps))
print(missing, type="html")
missing <- xtable(is.na(act$steps))
print(missing, type="html")
print(prop.table(missing),type="html")
missing <- xtable(table(is.na(act$steps)))
print(missing, type="html")
missing <- (table(is.na(act$steps)))
missing
prop.table(missing)
